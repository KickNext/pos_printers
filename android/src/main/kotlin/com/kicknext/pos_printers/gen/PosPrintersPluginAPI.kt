// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.kicknext.pos_printers.gen

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PosPrinterConnectionType(val raw: Int) {
  USB(0),
  NETWORK(1);

  companion object {
    fun ofRaw(raw: Int): PosPrinterConnectionType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Язык принтера (ESC/POS / CPCL / TSPL / ZPL / Unknown) */
enum class PrinterLanguage(val raw: Int) {
  ESC_POS(0),
  CPCL(1),
  TSPL(2),
  ZPL(3),
  UNKNOWN(4);

  companion object {
    fun ofRaw(raw: Int): PrinterLanguage? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * DTO c настройками подключения (USB, Network, etc.)
 * Без поля PrinterLanguage.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PrinterConnectionParams (
  val connectionType: PosPrinterConnectionType,
  val usbPath: String? = null,
  val macAddress: String? = null,
  val ipAddress: String? = null,
  val mask: String? = null,
  val gateway: String? = null,
  val dhcp: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PrinterConnectionParams {
      val connectionType = pigeonVar_list[0] as PosPrinterConnectionType
      val usbPath = pigeonVar_list[1] as String?
      val macAddress = pigeonVar_list[2] as String?
      val ipAddress = pigeonVar_list[3] as String?
      val mask = pigeonVar_list[4] as String?
      val gateway = pigeonVar_list[5] as String?
      val dhcp = pigeonVar_list[6] as Boolean?
      return PrinterConnectionParams(connectionType, usbPath, macAddress, ipAddress, mask, gateway, dhcp)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      connectionType,
      usbPath,
      macAddress,
      ipAddress,
      mask,
      gateway,
      dhcp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NetSettingsDTO (
  val ipAddress: String,
  val mask: String,
  val gateway: String,
  val dhcp: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NetSettingsDTO {
      val ipAddress = pigeonVar_list[0] as String
      val mask = pigeonVar_list[1] as String
      val gateway = pigeonVar_list[2] as String
      val dhcp = pigeonVar_list[3] as Boolean
      return NetSettingsDTO(ipAddress, mask, gateway, dhcp)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      ipAddress,
      mask,
      gateway,
      dhcp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ConnectResult (
  val success: Boolean,
  val message: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ConnectResult {
      val success = pigeonVar_list[0] as Boolean
      val message = pigeonVar_list[1] as String?
      return ConnectResult(success, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      success,
      message,
    )
  }
}
private open class PosPrintersPluginAPIPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PosPrinterConnectionType.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PrinterLanguage.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PrinterConnectionParams.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NetSettingsDTO.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ConnectResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PosPrinterConnectionType -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is PrinterLanguage -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is PrinterConnectionParams -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NetSettingsDTO -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is ConnectResult -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface POSPrintersApi {
  fun getPrinters(callback: (Result<Boolean>) -> Unit)
  fun connectPrinter(printer: PrinterConnectionParams, callback: (Result<ConnectResult>) -> Unit)
  fun disconnectPrinter(printer: PrinterConnectionParams, callback: (Result<Boolean>) -> Unit)
  fun getPrinterStatus(printer: PrinterConnectionParams, callback: (Result<String>) -> Unit)
  fun getPrinterSN(printer: PrinterConnectionParams, callback: (Result<String>) -> Unit)
  fun openCashBox(printer: PrinterConnectionParams, callback: (Result<String>) -> Unit)
  /** Печать HTML для обычных чековых ESC/POS принтеров. */
  fun printHTML(printer: PrinterConnectionParams, html: String, width: Long, callback: (Result<Boolean>) -> Unit)
  /** Печать сырых ESC/POS команд. */
  fun printData(printer: PrinterConnectionParams, data: ByteArray, width: Long, callback: (Result<Boolean>) -> Unit)
  /** Настройка сетевых параметров */
  fun setNetSettingsToPrinter(printer: PrinterConnectionParams, netSettings: NetSettingsDTO, callback: (Result<Boolean>) -> Unit)
  /**
   * Печать "сырых" команд (CPCL/TSPL/ZPL), если нужно.
   * [language] - указываем, какой именно формат (cpcl, tspl, zpl, ...)
   */
  fun printLabelData(printer: PrinterConnectionParams, language: PrinterLanguage, labelCommands: ByteArray, width: Long, callback: (Result<Boolean>) -> Unit)
  /**
   * Печать HTML на лейбл-принтер (рендерим HTML -> bitmap),
   * [language] - тип команды (cpcl, tspl, zpl) для отправки.
   */
  fun printLabelHTML(printer: PrinterConnectionParams, language: PrinterLanguage, html: String, width: Long, height: Long, callback: (Result<Boolean>) -> Unit)
  /**
   * Установка базовых параметров (размер этикетки, скорость, плотность)
   * [language] - cpcl, tspl, zpl
   */
  fun setupLabelParams(printer: PrinterConnectionParams, language: PrinterLanguage, labelWidth: Long, labelHeight: Long, densityOrDarkness: Long, speed: Long, callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by POSPrintersApi. */
    val codec: MessageCodec<Any?> by lazy {
      PosPrintersPluginAPIPigeonCodec()
    }
    /** Sets up an instance of `POSPrintersApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: POSPrintersApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinters$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getPrinters{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.connectPrinter$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            api.connectPrinter(printerArg) { result: Result<ConnectResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.disconnectPrinter$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            api.disconnectPrinter(printerArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinterStatus$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            api.getPrinterStatus(printerArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinterSN$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            api.getPrinterSN(printerArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.openCashBox$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            api.openCashBox(printerArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.printHTML$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            val htmlArg = args[1] as String
            val widthArg = args[2] as Long
            api.printHTML(printerArg, htmlArg, widthArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.printData$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            val dataArg = args[1] as ByteArray
            val widthArg = args[2] as Long
            api.printData(printerArg, dataArg, widthArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.setNetSettingsToPrinter$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            val netSettingsArg = args[1] as NetSettingsDTO
            api.setNetSettingsToPrinter(printerArg, netSettingsArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.printLabelData$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            val languageArg = args[1] as PrinterLanguage
            val labelCommandsArg = args[2] as ByteArray
            val widthArg = args[3] as Long
            api.printLabelData(printerArg, languageArg, labelCommandsArg, widthArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.printLabelHTML$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            val languageArg = args[1] as PrinterLanguage
            val htmlArg = args[2] as String
            val widthArg = args[3] as Long
            val heightArg = args[4] as Long
            api.printLabelHTML(printerArg, languageArg, htmlArg, widthArg, heightArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.setupLabelParams$separatedMessageChannelSuffix", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as PrinterConnectionParams
            val languageArg = args[1] as PrinterLanguage
            val labelWidthArg = args[2] as Long
            val labelHeightArg = args[3] as Long
            val densityOrDarknessArg = args[4] as Long
            val speedArg = args[5] as Long
            api.setupLabelParams(printerArg, languageArg, labelWidthArg, labelHeightArg, densityOrDarknessArg, speedArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class POSPrintersReceiverApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by POSPrintersReceiverApi. */
    val codec: MessageCodec<Any?> by lazy {
      PosPrintersPluginAPIPigeonCodec()
    }
  }
  fun newPrinter(messageArg: PrinterConnectionParams, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.newPrinter$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun connectionHandler(messageArg: ConnectResult, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.connectionHandler$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
