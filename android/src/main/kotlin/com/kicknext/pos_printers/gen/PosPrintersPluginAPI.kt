// Autogenerated from Pigeon (v17.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.kicknext.pos_printers.gen

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PosPrinterConnectionType(val raw: Int) {
  USB(0),
  NETWORK(1);

  companion object {
    fun ofRaw(raw: Int): PosPrinterConnectionType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class XPrinterDTO (
  val connectionType: PosPrinterConnectionType,
  val usbPath: String? = null,
  val macAddress: String? = null,
  val ipAddress: String? = null,
  val mask: String? = null,
  val gateway: String? = null,
  val dhcp: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): XPrinterDTO {
      val connectionType = PosPrinterConnectionType.ofRaw(list[0] as Int)!!
      val usbPath = list[1] as String?
      val macAddress = list[2] as String?
      val ipAddress = list[3] as String?
      val mask = list[4] as String?
      val gateway = list[5] as String?
      val dhcp = list[6] as Boolean?
      return XPrinterDTO(connectionType, usbPath, macAddress, ipAddress, mask, gateway, dhcp)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      connectionType.raw,
      usbPath,
      macAddress,
      ipAddress,
      mask,
      gateway,
      dhcp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NetSettingsDTO (
  val ipAddress: String,
  val mask: String,
  val gateway: String,
  val dhcp: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NetSettingsDTO {
      val ipAddress = list[0] as String
      val mask = list[1] as String
      val gateway = list[2] as String
      val dhcp = list[3] as Boolean
      return NetSettingsDTO(ipAddress, mask, gateway, dhcp)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      ipAddress,
      mask,
      gateway,
      dhcp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ConnectResult (
  val success: Boolean,
  val message: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ConnectResult {
      val success = list[0] as Boolean
      val message = list[1] as String?
      return ConnectResult(success, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      success,
      message,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object POSPrintersApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ConnectResult.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NetSettingsDTO.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          XPrinterDTO.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ConnectResult -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NetSettingsDTO -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is XPrinterDTO -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface POSPrintersApi {
  fun getPrinters(callback: (Result<Boolean>) -> Unit)
  fun connectPrinter(printer: XPrinterDTO, callback: (Result<ConnectResult>) -> Unit)
  fun getPrinterStatus(printer: XPrinterDTO, callback: (Result<String>) -> Unit)
  fun getPrinterSN(printer: XPrinterDTO, callback: (Result<String>) -> Unit)
  fun openCashBox(printer: XPrinterDTO, callback: (Result<String>) -> Unit)
  fun printHTML(html: String, width: Long, callback: (Result<Boolean>) -> Unit)
  fun setNetSettingsToPrinter(printer: XPrinterDTO, netSettings: NetSettingsDTO, callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by POSPrintersApi. */
    val codec: MessageCodec<Any?> by lazy {
      POSPrintersApiCodec
    }
    /** Sets up an instance of `POSPrintersApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: POSPrintersApi?) {
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinters", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getPrinters() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.connectPrinter", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as XPrinterDTO
            api.connectPrinter(printerArg) { result: Result<ConnectResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinterStatus", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as XPrinterDTO
            api.getPrinterStatus(printerArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinterSN", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as XPrinterDTO
            api.getPrinterSN(printerArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.openCashBox", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as XPrinterDTO
            api.openCashBox(printerArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.printHTML", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val htmlArg = args[0] as String
            val widthArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.printHTML(htmlArg, widthArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val taskQueue = binaryMessenger.makeBackgroundTaskQueue()
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.pos_printers.POSPrintersApi.setNetSettingsToPrinter", codec, taskQueue)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val printerArg = args[0] as XPrinterDTO
            val netSettingsArg = args[1] as NetSettingsDTO
            api.setNetSettingsToPrinter(printerArg, netSettingsArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object POSPrintersReceiverApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ConnectResult.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          XPrinterDTO.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ConnectResult -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is XPrinterDTO -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class POSPrintersReceiverApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by POSPrintersReceiverApi. */
    val codec: MessageCodec<Any?> by lazy {
      POSPrintersReceiverApiCodec
    }
  }
  fun newPrinter(messageArg: XPrinterDTO, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.newPrinter"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun connectionHandler(messageArg: ConnectResult, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.connectionHandler"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
