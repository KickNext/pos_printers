// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum PosPrinterConnectionType {
  usb,
  network,
}

/// Язык лейбл-принтера (CPCL / TSPL / ZPL)
enum LabelPrinterLanguage {
  cpcl,
  tspl,
  zpl,
}

/// DTO c настройками подключения (USB, Network, etc.)
/// Без поля PrinterLanguage.
class PrinterConnectionParams {
  PrinterConnectionParams({
    required this.connectionType,
    this.usbPath,
    this.macAddress,
    this.ipAddress,
    this.mask,
    this.gateway,
    this.dhcp,
    this.vendorId,
    this.productId,
    this.manufacturer,
    this.productName,
    this.usbSerialNumber,
  });

  PosPrinterConnectionType connectionType;

  String? usbPath;

  String? macAddress;

  String? ipAddress;

  String? mask;

  String? gateway;

  bool? dhcp;

  int? vendorId;

  int? productId;

  String? manufacturer;

  String? productName;

  String? usbSerialNumber;

  Object encode() {
    return <Object?>[
      connectionType,
      usbPath,
      macAddress,
      ipAddress,
      mask,
      gateway,
      dhcp,
      vendorId,
      productId,
      manufacturer,
      productName,
      usbSerialNumber,
    ];
  }

  static PrinterConnectionParams decode(Object result) {
    result as List<Object?>;
    return PrinterConnectionParams(
      connectionType: result[0]! as PosPrinterConnectionType,
      usbPath: result[1] as String?,
      macAddress: result[2] as String?,
      ipAddress: result[3] as String?,
      mask: result[4] as String?,
      gateway: result[5] as String?,
      dhcp: result[6] as bool?,
      vendorId: result[7] as int?,
      productId: result[8] as int?,
      manufacturer: result[9] as String?,
      productName: result[10] as String?,
      usbSerialNumber: result[11] as String?,
    );
  }
}

class NetSettingsDTO {
  NetSettingsDTO({
    required this.ipAddress,
    required this.mask,
    required this.gateway,
    required this.dhcp,
  });

  String ipAddress;

  String mask;

  String gateway;

  bool dhcp;

  Object encode() {
    return <Object?>[
      ipAddress,
      mask,
      gateway,
      dhcp,
    ];
  }

  static NetSettingsDTO decode(Object result) {
    result as List<Object?>;
    return NetSettingsDTO(
      ipAddress: result[0]! as String,
      mask: result[1]! as String,
      gateway: result[2]! as String,
      dhcp: result[3]! as bool,
    );
  }
}

class ConnectResult {
  ConnectResult({
    required this.success,
    this.message,
  });

  bool success;

  String? message;

  Object encode() {
    return <Object?>[
      success,
      message,
    ];
  }

  static ConnectResult decode(Object result) {
    result as List<Object?>;
    return ConnectResult(
      success: result[0]! as bool,
      message: result[1] as String?,
    );
  }
}

/// DTO с расширенной информацией о принтере
class PrinterDetailsDTO {
  PrinterDetailsDTO({
    this.serialNumber,
    this.firmwareVersion,
    this.deviceModel,
    this.currentStatus,
  });

  String? serialNumber;

  String? firmwareVersion;

  String? deviceModel;

  String? currentStatus;

  Object encode() {
    return <Object?>[
      serialNumber,
      firmwareVersion,
      deviceModel,
      currentStatus,
    ];
  }

  static PrinterDetailsDTO decode(Object result) {
    result as List<Object?>;
    return PrinterDetailsDTO(
      serialNumber: result[0] as String?,
      firmwareVersion: result[1] as String?,
      deviceModel: result[2] as String?,
      currentStatus: result[3] as String?,
    );
  }
}

/// Generic result for operations that succeed or fail with an optional message.
class OperationResult {
  OperationResult({
    required this.success,
    this.errorMessage,
  });

  bool success;

  String? errorMessage;

  Object encode() {
    return <Object?>[
      success,
      errorMessage,
    ];
  }

  static OperationResult decode(Object result) {
    result as List<Object?>;
    return OperationResult(
      success: result[0]! as bool,
      errorMessage: result[1] as String?,
    );
  }
}

/// Result for getting printer status.
class StatusResult {
  StatusResult({
    required this.success,
    this.errorMessage,
    this.status,
  });

  bool success;

  String? errorMessage;

  String? status;

  Object encode() {
    return <Object?>[
      success,
      errorMessage,
      status,
    ];
  }

  static StatusResult decode(Object result) {
    result as List<Object?>;
    return StatusResult(
      success: result[0]! as bool,
      errorMessage: result[1] as String?,
      status: result[2] as String?,
    );
  }
}

/// Result for getting printer serial number or other string values.
class StringResult {
  StringResult({
    required this.success,
    this.errorMessage,
    this.value,
  });

  bool success;

  String? errorMessage;

  String? value;

  Object encode() {
    return <Object?>[
      success,
      errorMessage,
      value,
    ];
  }

  static StringResult decode(Object result) {
    result as List<Object?>;
    return StringResult(
      success: result[0]! as bool,
      errorMessage: result[1] as String?,
      value: result[2] as String?,
    );
  }
}

/// Result for the initial printer discovery call.
/// Note: Individual printers are still sent via `newPrinter` callback.
/// This result indicates if the scan *started* successfully.
class ScanInitiationResult {
  ScanInitiationResult({
    required this.success,
    this.errorMessage,
  });

  bool success;

  String? errorMessage;

  Object encode() {
    return <Object?>[
      success,
      errorMessage,
    ];
  }

  static ScanInitiationResult decode(Object result) {
    result as List<Object?>;
    return ScanInitiationResult(
      success: result[0]! as bool,
      errorMessage: result[1] as String?,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is PosPrinterConnectionType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is LabelPrinterLanguage) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is PrinterConnectionParams) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is NetSettingsDTO) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is ConnectResult) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is PrinterDetailsDTO) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is OperationResult) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is StatusResult) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is StringResult) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is ScanInitiationResult) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PosPrinterConnectionType.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : LabelPrinterLanguage.values[value];
      case 131: 
        return PrinterConnectionParams.decode(readValue(buffer)!);
      case 132: 
        return NetSettingsDTO.decode(readValue(buffer)!);
      case 133: 
        return ConnectResult.decode(readValue(buffer)!);
      case 134: 
        return PrinterDetailsDTO.decode(readValue(buffer)!);
      case 135: 
        return OperationResult.decode(readValue(buffer)!);
      case 136: 
        return StatusResult.decode(readValue(buffer)!);
      case 137: 
        return StringResult.decode(readValue(buffer)!);
      case 138: 
        return ScanInitiationResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSPrintersApi {
  /// Constructor for [POSPrintersApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSPrintersApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<ScanInitiationResult> getPrinters() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinters$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ScanInitiationResult?)!;
    }
  }

  Future<ConnectResult> connectPrinter(PrinterConnectionParams printer) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.connectPrinter$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ConnectResult?)!;
    }
  }

  Future<OperationResult> disconnectPrinter(PrinterConnectionParams printer) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.disconnectPrinter$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as OperationResult?)!;
    }
  }

  Future<StatusResult> getPrinterStatus(PrinterConnectionParams printer) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinterStatus$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as StatusResult?)!;
    }
  }

  Future<StringResult> getPrinterSN(PrinterConnectionParams printer) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinterSN$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as StringResult?)!;
    }
  }

  Future<OperationResult> openCashBox(PrinterConnectionParams printer) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.openCashBox$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as OperationResult?)!;
    }
  }

  /// Печать HTML для обычных чековых ESC/POS принтеров.
  Future<OperationResult> printHTML(PrinterConnectionParams printer, String html, int width) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.printHTML$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer, html, width]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as OperationResult?)!;
    }
  }

  /// Печать сырых ESC/POS команд.
  Future<OperationResult> printData(PrinterConnectionParams printer, Uint8List data, int width) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.printData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer, data, width]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as OperationResult?)!;
    }
  }

  /// Настройка сетевых параметров
  Future<OperationResult> setNetSettingsToPrinter(PrinterConnectionParams printer, NetSettingsDTO netSettings) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.setNetSettingsToPrinter$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer, netSettings]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as OperationResult?)!;
    }
  }

  /// Печать "сырых" команд (CPCL/TSPL/ZPL), если нужно.
  /// [language] - указываем, какой именно формат (cpcl, tspl, zpl, ...)
  Future<OperationResult> printLabelData(PrinterConnectionParams printer, LabelPrinterLanguage language, Uint8List labelCommands, int width) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.printLabelData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer, language, labelCommands, width]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as OperationResult?)!;
    }
  }

  /// Печать HTML на лейбл-принтер (рендерим HTML -> bitmap),
  /// [language] - тип команды (cpcl, tspl, zpl) для отправки.
  Future<OperationResult> printLabelHTML(PrinterConnectionParams printer, LabelPrinterLanguage language, String html, int width, int height) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.printLabelHTML$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer, language, html, width, height]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as OperationResult?)!;
    }
  }

  /// Установка базовых параметров (размер этикетки, скорость, плотность)
  /// [language] - cpcl, tspl, zpl
  Future<OperationResult> setupLabelParams(PrinterConnectionParams printer, LabelPrinterLanguage language, int labelWidth, int labelHeight, int densityOrDarkness, int speed) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.setupLabelParams$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer, language, labelWidth, labelHeight, densityOrDarkness, speed]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as OperationResult?)!;
    }
  }

  /// Получение расширенной информации о принтере
  Future<PrinterDetailsDTO> getPrinterDetails(PrinterConnectionParams printer) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pos_printers.POSPrintersApi.getPrinterDetails$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[printer]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PrinterDetailsDTO?)!;
    }
  }
}

abstract class POSPrintersReceiverApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void newPrinter(PrinterConnectionParams message);

  void connectionHandler(ConnectResult message);

  /// Called by native code when the printer scan process is complete.
  void scanCompleted(bool success, String? errorMessage);

  static void setUp(POSPrintersReceiverApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.newPrinter$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.newPrinter was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PrinterConnectionParams? arg_message = (args[0] as PrinterConnectionParams?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.newPrinter was null, expected non-null PrinterConnectionParams.');
          try {
            api.newPrinter(arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.connectionHandler$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.connectionHandler was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConnectResult? arg_message = (args[0] as ConnectResult?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.connectionHandler was null, expected non-null ConnectResult.');
          try {
            api.connectionHandler(arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.scanCompleted$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.scanCompleted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_success = (args[0] as bool?);
          assert(arg_success != null,
              'Argument for dev.flutter.pigeon.pos_printers.POSPrintersReceiverApi.scanCompleted was null, expected non-null bool.');
          final String? arg_errorMessage = (args[1] as String?);
          try {
            api.scanCompleted(arg_success!, arg_errorMessage);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
